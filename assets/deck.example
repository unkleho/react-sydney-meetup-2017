const ObjectModel = new mongoose.model('Object', {
  title: String,
  description: String,
});

const ObjectTC = composeWithMongoose(ObjectModel);

GQC.rootQuery().addFields({
  ObjectById: ObjectTC.getResolver('findById'),
  ObjectMany: ObjectTC.getResolver('findMany'),
});

GQC.rootMutation().addFields({
  ObjectCreate: ObjectTC.getResolver('createOne'),
  ObjectUpdateById: ObjectTC.getResolver('updateById'),
  ObjectRemoveById: ObjectTC.getResolver('removeById'),
});

const graphqlSchema = GQC.buildSchema();
...
app.use('/graphql', graphqlHTTP({
  schema: graphqlSchema,
}));

ObjectTC.addFields({
  customField: {
    type: 'String',
    resolve: (source, args, context, info) => 'some value',
  }
});

ObjectTC.addRelation(
  'parent',
  () => ({
    resolver: ObjectTC.getResolver('findById'),
    args: {
      _ids: (source) => source.parentId,
    },
    projection: { parentId: true },
  })
)
